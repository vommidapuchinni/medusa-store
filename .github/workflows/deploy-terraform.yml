name: Deploy or Destroy Medusa

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Get Terraform Output (JSON)
        if: github.event.inputs.action == 'apply'
        id: output_json
        run: |
          terraform output -json > output.json
        working-directory: ./terraform

      - name: Extract EC2 Instance IP from JSON
        if: github.event.inputs.action == 'apply'
        id: extract_ip
        run: |
          instance_ip=$(jq -r '.instance_ip.value' output.json)
          if [ -n "$instance_ip" ]; then
            echo "INSTANCE_IP=$instance_ip" >> $GITHUB_ENV
            echo "EC2 instance IP is: $instance_ip"
          else
            echo "No valid instance IP found."
            exit 1
          fi
        working-directory: ./terraform
        shell: bash

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        working-directory: ./terraform

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Wait for EC2 Instance
        if: github.event.inputs.action == 'apply'
        run: |
          echo "Waiting for EC2 instance to be ready..."
          sleep 30  # Wait for the instance to initialize

      - name: Update and Install Dependencies
        if: github.event.inputs.action == 'apply'
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.INSTANCE_IP }} << 'EOF'
            set -e  # Exit if any command fails
            sudo apt-get update -y
            sudo apt-get install -y nodejs npm postgresql postgresql-contrib redis-server
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
            
            # Create PostgreSQL user and database
            sudo -u postgres psql -c "CREATE USER medusa_user WITH PASSWORD 'chinni' CREATEDB;"
            sudo -u postgres psql -c "CREATE DATABASE medusa_db OWNER medusa_user;"
            
            # Clone Medusa repository and set it up
            git clone https://github.com/vommidapuchinni/medusa-store.git ~/medusa-store
            cd ~/medusa-store
            npm install -g @medusajs/medusa-cli
            npm install
            npx medusa migrations run
            npx medusa user -e medusaadmin@gmail.com -p chinni
            nohup npm run start &> medusa.log &
            echo "Medusa deployment initiated."
          EOF
