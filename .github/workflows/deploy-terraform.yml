name: Terraform Workflow

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: 'vommidapuchinni/medusa-store'

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        if: github.event.inputs.action == 'apply'
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Terraform Outputs
        if: github.event.inputs.action == 'apply'
        run: |
          cd terraform
          terraform output -raw instance_ip > instance_ip.txt
          cat instance_ip.txt

      - name: Wait for EC2 instance
        if: github.event.inputs.action == 'apply'
        run: |
          IP_ADDRESS=$(cat terraform/instance_ip.txt || echo "")
          if [ -z "$IP_ADDRESS" ]; then
            echo "Error: Instance IP address not found. Ensure the instance is created and outputs are defined."
            exit 1
          fi
          echo "Waiting for EC2 instance to be ready at $IP_ADDRESS"
          while ! nc -zv $IP_ADDRESS 22; do sleep 10; done
          echo "EC2 instance is now ready"

      - name: Install Dependencies and Set Up Medusa
        if: github.event.inputs.action == 'apply'
        run: |
          IP_ADDRESS=$(cat terraform/instance_ip.txt || echo "")
          if [ -z "$IP_ADDRESS" ]; then
            echo "Error: Instance IP address not found. Aborting installation."
            exit 1
          fi
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$IP_ADDRESS << 'EOF'
            # Update and install Node.js, npm, PostgreSQL, and Redis
            sudo apt-get update -y && sudo apt-get install -y nodejs npm postgresql postgresql-contrib redis-server

            # Start PostgreSQL and Redis services
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
            sudo systemctl start redis-server
            sudo systemctl enable redis-server

            # Create PostgreSQL user and database
            sudo -u postgres psql -c "CREATE USER medusa_user WITH PASSWORD 'chinni' CREATEDB;"
            sudo -u postgres psql -c "CREATE DATABASE medusa_db OWNER medusa_user;"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE medusa_db TO medusa_user;"

            # Clone and set up Medusa
            if [ ! -d "./medusa-store" ]; then
              git clone https://github.com/vommidapuchinni/medusa-store.git ./medusa-store
            else
              cd ./medusa-store && git pull
            fi

            cd ./medusa-store
            sudo npm install -g @medusajs/medusa-cli
            npm install
            npx medusa migrations run
            nohup npm run start > medusa.log 2>&1 &
            echo "Medusa deployment initiated."
          EOF
