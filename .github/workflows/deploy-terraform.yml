name: Deploy Medusa automatically

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action: apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    name: Terraform Apply or Destroy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      # Step 3: Initialize Terraform in the terraform directory
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
        run: terraform init
        working-directory: ./terraform

      # Step 4: Conditionally apply or destroy based on the input
      - name: Terraform Apply or Destroy
        id: terraform_apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
        run: |
          if [[ "${{ github.event.inputs.action }}" == "apply" ]]; then
            terraform apply -auto-approve
            echo "::set-output name=instance_ip::$(terraform output -raw instance_ip)"  # Capture the public IP
          elif [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terraform destroy -auto-approve
          fi
        working-directory: ./terraform

      # Step 5: SSH into EC2 and clone the repository
      - name: Clone repository on EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}  
          HOST: ${{ secrets.EC2_HOST }}              
          USER: ubuntu                                 
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            set -e
            # Install git if not already installed
            sudo apt update -y
            sudo apt install -y git

            # Clone the Medusa store repository
            git clone https://github.com/vommidapuchinni/medusa-store.git /home/ubuntu/medusa-store
            cd /home/ubuntu/medusa-store
          EOF

      # Step 6: SSH into EC2 and install dependencies
      - name: SSH into EC2 and install dependencies
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}  
          HOST: ${{ secrets.EC2_HOST }}              
          USER: ubuntu                                 
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            set -e
            # Update and install required packages
            sudo apt update -y
            sudo apt install -y nodejs npm postgresql postgresql-contrib redis

            # Start PostgreSQL and Redis services
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
            sudo systemctl start redis
            sudo systemctl enable redis

            # Set up PostgreSQL for Medusa
            sudo -u postgres psql -c "CREATE DATABASE medusa_db;"
            sudo -u postgres psql -c "CREATE USER medusa_user WITH PASSWORD '${{ secrets.DB_PASSWORD }}';"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE medusa_db TO medusa_user;"
          EOF

      # Step 7: SSH into EC2, run migrations, and start the application
      - name: SSH into EC2, run migrations, and start the application
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}  
          HOST: ${{ secrets.EC2_HOST }}              
          USER: ubuntu                                 
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            set -e
            cd /home/ubuntu/medusa-store/
            npm install
            npm run clean
            npm run build
            
            # Run migrations
            npm run migrate
            
            # Start the application in the background and log output
            nohup npm run start > medusa.log 2>&1 &
            echo "Medusa application started. Logs can be found in medusa.log"
          EOF
