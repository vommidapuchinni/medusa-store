name: Deploy or Destroy Medusa

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Adjust region as needed

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: | 
          terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Update and Install Dependencies
        if: github.event.inputs.action == 'apply'
        run: |
          INSTANCE_IP=$(terraform output -raw instance_ip)
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 ubuntu@$INSTANCE_IP << 'EOF'
            # Update and install necessary packages
            sudo apt-get update -y
            sudo apt-get upgrade -y
            
            # Install Node.js 18.x
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt install -y nodejs
            
            # Install PostgreSQL
            sudo apt install -y postgresql postgresql-contrib
            sudo systemctl start postgresql
            sudo systemctl enable postgresql

            # Create PostgreSQL database and user
            sudo -u postgres psql -c "CREATE USER medusa_user WITH PASSWORD 'chinni' CREATEDB;"
            sudo -u postgres psql -c "CREATE DATABASE medusa_db OWNER medusa_user;"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE medusa_db TO medusa_user;"

            # Install Redis
            sudo apt install -y redis-server
            sudo systemctl enable redis-server
            sudo systemctl start redis-server

            # Clone the Medusa app repository
            git clone https://github.com/vommidapuchinni/medusa-store.git ./medusa-store

            cd ./medusa-store

            # Set up .env file
            echo "DATABASE_URL=postgres://medusa_user:chinni@localhost:5432/medusa_db" > .env
            echo "REDIS_URL=redis://localhost:6379" >> .env

            # Install Medusa dependencies
            sudo npm install -g @medusajs/medusa-cli
            npm install

            # Run database migrations
            npx medusa migrations run

            # Create Medusa admin user
            npx medusa user -e medusaadmin@gmail.com -p chinni

            # Start the Medusa application in the background
            nohup npm run start &> medusa.log &

            echo "Medusa deployment initiated."
          EOF
