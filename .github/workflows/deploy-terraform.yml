name: Deploy Medusa to EC2 (terraform)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action: apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    name: Terraform Apply or Destroy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      # Step 3: Initialize Terraform in the terraform directory
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS Access Key
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS Secret Key
        run: terraform init
        working-directory: ./terraform

      # Step 4: Conditionally apply or destroy based on the input
      - name: Terraform Apply or Destroy
        id: terraform_apply
        run: |
          if [[ "${{ github.event.inputs.action }}" == "apply" ]]; then
            terraform apply -auto-approve
            echo "::set-output name=instance_ip::$(terraform output -raw instance_ip)"  # Capture the public IP
          elif [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terraform destroy -auto-approve
          fi
        working-directory: ./terraform

      # Step 5: (Optional) Post deployment tasks for `apply` (Install Medusa, etc.)
      - name: Install Medusa on EC2 (only for apply)
        if: ${{ github.event.inputs.action == 'apply' }}
        env:
          EC2_PUBLIC_IP: ${{ steps.terraform_apply.outputs.instance_ip }}  # Use terraform output for instance IP
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # SSH private key from GitHub secrets
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@"${EC2_PUBLIC_IP}" << 'EOF'
            sudo apt update -y
            sudo apt install -y nodejs npm postgresql postgresql-contrib redis git

            # Start PostgreSQL and Redis services
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
            sudo systemctl start redis
            sudo systemctl enable redis

            # Set up PostgreSQL for Medusa
            sudo -u postgres psql -c "CREATE DATABASE medusa_db;"
            sudo -u postgres psql -c "CREATE USER medusa_user WITH PASSWORD 'chinni';"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE medusa_db TO medusa_user;"

            # Clone the Medusa store repo and set up the application
            git clone https://github.com/vommidapuchinni/medusa-store.git /home/ubuntu/medusa-app
            cd /home/ubuntu/medusa-app

            # Use the .env file from the repo
            cp .env.example .env

            # Clean up node_modules and install dependencies
            rm -rf node_modules
            npm install

            # Clean and build the Medusa project
            npm run clean
            npm run build

            # Start the application in the background and log output
            nohup npm run start > medusa.log 2>&1 &
            echo "Medusa application started. Logs can be found in medusa.log"
          EOF
          rm private_key.pem  # Clean up the private key file
