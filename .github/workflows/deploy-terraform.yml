name: Deploy Medusa

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action: apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply or Destroy
        id: terraform_action
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
        run: |
          if [[ "${{ github.event.inputs.action }}" == "apply" ]]; then
            terraform apply -auto-approve
            echo "INSTANCE_IP=$(terraform output -raw instance_ip)" >> $GITHUB_ENV  # Set IP in environment
          elif [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terraform destroy -auto-approve
            echo "Infrastructure destroyed."
          fi
        working-directory: ./terraform

      - name: SSH into EC2 and install dependencies
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}  
          HOST: ${{ env.INSTANCE_IP }}              
          USER: ubuntu                                 
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            # Update package list and install required packages
            sudo apt update -y
            sudo apt install -y git nodejs npm postgresql postgresql-contrib redis

            # Start PostgreSQL and Redis services
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
            sudo systemctl start redis
            sudo systemctl enable redis

            # Set up PostgreSQL for Medusa
            sudo -u postgres psql -c "CREATE DATABASE medusa_db;"
            sudo -u postgres psql -c "CREATE USER medusa_user WITH PASSWORD 'chinni';"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE medusa_db TO medusa_user;"
          EOF

      - name: SSH into EC2, clone repo, and start the application
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}  
          HOST: ${{ env.INSTANCE_IP }}              
          USER: ubuntu                                 
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            # Clone the Medusa store repository
            git clone https://github.com/vommidapuchinni/medusa-store.git /home/ubuntu/medusa-store

            cd /home/ubuntu/medusa-store/
            npm install
            npm run clean
            npm run build
            
            # Run migrations
            npm run migrate
            
            # Start the application in the background and log output
            nohup npm run start > medusa.log 2>&1 &
            echo "Medusa application started. Logs can be found in medusa.log"
            exit
          EOF

      - name: Clean up private key
        run: rm private_key.pem
